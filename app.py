#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ ASSISTENTE FINANCEIRO WHATSAPP - RENDER DEPLOY
================================================

Servidor Flask otimizado para deploy no Render.com
- IA aprimorada para comandos naturais
- SQLite com persistence
- Webhook otimizado para WhatsApp/Twilio
- Logs estruturados para monitoramento
"""

import os
import sys
import sqlite3
import requests
from datetime import datetime, date, timedelta
from flask import Flask, request, jsonify
import re
import json
import logging

# ==================== CONFIGURA√á√ïES ====================
app = Flask(__name__)

# Configura√ß√£o para Render
PORT = int(os.environ.get('PORT', 5000))
DEBUG = os.environ.get('FLASK_ENV') != 'production'
DB_FILE = 'assistente_financeiro.db'

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ==================== BANCO DE DADOS ====================
def inicializar_banco():
    """Inicializar banco de dados SQLite"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        # Tabela de lan√ßamentos financeiros
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS lancamentos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario TEXT NOT NULL,
                tipo TEXT NOT NULL,  -- 'gasto', 'receita'
                valor REAL NOT NULL,
                descricao TEXT,
                categoria TEXT,
                subcategoria TEXT,
                data_lancamento DATETIME DEFAULT CURRENT_TIMESTAMP,
                data_efetiva DATE DEFAULT (date('now')),
                observacoes TEXT,
                origem TEXT DEFAULT 'whatsapp'
            )
        ''')
        
        # Tabela de categorias personalizadas por usu√°rio
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categorias_usuario (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario TEXT NOT NULL,
                palavra_chave TEXT NOT NULL,
                categoria TEXT NOT NULL,
                subcategoria TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Tabela de configura√ß√µes por usu√°rio
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS configuracoes_usuario (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                usuario TEXT NOT NULL UNIQUE,
                nome TEXT,
                limite_mensal REAL,
                moeda TEXT DEFAULT 'BRL',
                fuso_horario TEXT DEFAULT 'America/Sao_Paulo',
                notificacoes BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ Banco de dados inicializado com sucesso")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar banco: {e}")
        return False

# ==================== PROCESSAMENTO IA ====================
def processar_comando_ia(mensagem, usuario):
    """
    IA aprimorada para processar comandos naturais em portugu√™s
    
    Args:
        mensagem (str): Mensagem do usu√°rio
        usuario (str): ID do usu√°rio (telefone)
    
    Returns:
        str: Resposta formatada para o usu√°rio
    """
    
    mensagem_original = mensagem
    mensagem_lower = mensagem.lower().strip()
    
    logger.info(f"üß† Processando comando: '{mensagem}' do usu√°rio {usuario}")
    
    # Palavras-chave para relat√≥rios (EXPANDIDO)
    palavras_relatorio = [
        'relat√≥rio', 'relatorio', 'gastos', 'extrato', 'resumo',
        'mostre', 'mostra', 'mostrar', 'ver', 'veja', 'lista', 'listar',
        'meus gastos', 'minhas despesas', 'minha conta', 'movimenta√ß√£o', 
        'movimentacao', 'transa√ß√µes', 'transacoes', 'historico', 'hist√≥rico',
        'saldo', 'quanto gastei', 'quanto tenho', 'balan√ßo', 'balanco',
        'conta', 'contas', 'dinheiro', 'financeiro', 'financeira'
    ]
    
    # Palavras de ajuda
    palavras_ajuda = ['ajuda', 'help', 'comandos', 'opcoes', 'op√ß√µes', 'como usar']
    
    # Verificar se √© pedido de ajuda
    if any(palavra in mensagem_lower for palavra in palavras_ajuda):
        return gerar_mensagem_ajuda()
    
    # Verificar se √© comando de relat√≥rio
    if any(palavra in mensagem_lower for palavra in palavras_relatorio):
        return gerar_relatorio_inteligente(mensagem_lower, usuario)
    
    # Verificar se √© comando de exclus√£o
    palavras_exclusao = ['deletar', 'delete', 'excluir', 'apagar', 'remover', 'cancelar']
    if any(palavra in mensagem_lower for palavra in palavras_exclusao):
        return processar_exclusao(mensagem_lower, usuario)
    
    # Analisar lan√ßamento financeiro
    analise = analisar_lancamento_financeiro(mensagem_original)
    
    if analise['sucesso']:
        resultado = salvar_lancamento(
            usuario=usuario,
            tipo=analise['tipo'],
            valor=analise['valor'],
            descricao=analise['descricao'],
            categoria=analise['categoria']
        )
        
        if resultado:
            emoji = "üí∞" if analise['tipo'] == 'receita' else "üí∏"
            resposta = f"""{emoji} **{analise['tipo'].title()} registrada com sucesso!**

üíµ **Valor:** R$ {analise['valor']:.2f}
üìù **Descri√ß√£o:** {analise['descricao']}
üè∑Ô∏è **Categoria:** {analise['categoria']}
üìÖ **Data:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}

‚úÖ Lan√ßamento salvo no banco de dados!"""
        else:
            resposta = f"‚ö†Ô∏è {analise['tipo'].title()} identificada (R$ {analise['valor']:.2f}), mas houve erro ao salvar."
    else:
        resposta = f"""‚ùì **N√£o consegui identificar um valor v√°lido.**

üí° **EXEMPLOS DE COMANDOS:**
‚Ä¢ "Gastei R$ 25,00 no almo√ßo"
‚Ä¢ "Recebi 1000 sal√°rio"  
‚Ä¢ "50 reais uber"
‚Ä¢ "Paguei 200 de conta de luz"

üìä **RELAT√ìRIOS:**
‚Ä¢ "Mostre meus gastos de hoje"
‚Ä¢ "Qual meu saldo?"
‚Ä¢ "Relat√≥rio da semana"
‚Ä¢ "Gastos do m√™s"

‚ùì Digite **"ajuda"** para ver todos os comandos"""
    
    return resposta

def analisar_lancamento_financeiro(mensagem):
    """
    Analisar mensagem para extrair informa√ß√µes financeiras
    
    Returns:
        dict: {sucesso, tipo, valor, descricao, categoria}
    """
    
    mensagem_lower = mensagem.lower()
    
    # Padr√µes para detectar valores monet√°rios
    padroes_valor = [
        r'r\$\s*(\d+(?:[,\.]\d{1,2})?)',  # R$ 100 ou R$ 100,50
        r'(\d+(?:[,\.]\d{1,2})?)\s*reais?',  # 100 reais
        r'(\d+(?:[,\.]\d{1,2})?)\s*r\$',  # 100 R$
        r'(\d+(?:[,\.]\d{1,2})?)(?=\s|$)',  # N√∫mero solto
    ]
    
    valor_encontrado = None
    for padrao in padroes_valor:
        matches = re.findall(padrao, mensagem_lower)
        if matches:
            try:
                valor_str = matches[0].replace(',', '.')
                valor_encontrado = float(valor_str)
                if valor_encontrado > 0:  # Validar valor positivo
                    break
            except (ValueError, IndexError):
                continue
    
    if not valor_encontrado:
        return {'sucesso': False}
    
    # Determinar tipo (receita vs gasto)
    palavras_receita = [
        'recebi', 'recebimento', 'sal√°rio', 'salario', 'renda', 'entrada',
        'ganho', 'ganhei', 'lucro', 'comissao', 'comiss√£o', 'bonus',
        'freelance', 'trabalho', 'venda', 'vendeu', 'pagaram', 'depositou'
    ]
    
    tipo = 'receita' if any(palavra in mensagem_lower for palavra in palavras_receita) else 'gasto'
    
    # Determinar categoria automaticamente
    categoria = detectar_categoria(mensagem_lower)
    
    # Gerar descri√ß√£o limpa
    descricao = gerar_descricao(mensagem, valor_encontrado)
    
    return {
        'sucesso': True,
        'tipo': tipo,
        'valor': valor_encontrado,
        'descricao': descricao,
        'categoria': categoria
    }

def detectar_categoria(texto):
    """Detectar categoria baseada em palavras-chave"""
    
    categorias = {
        'Alimenta√ß√£o': [
            'mercado', 'supermercado', 'padaria', 'a√ßougue', 'acougue',
            'restaurante', 'lanchonete', 'pizzaria', 'hamburguer', 
            'almo√ßo', 'almoco', 'jantar', 'lanche', 'comida', 'food',
            'ifood', 'uber eats', 'delivery'
        ],
        'Transporte': [
            'uber', 'taxi', 'gasolina', 'combustivel', 'combust√≠vel',
            'onibus', '√¥nibus', 'metro', 'metr√¥', 'trem', 'passagem',
            'posto', 'estacionamento', 'ped√°gio', 'pedagio'
        ],
        'Moradia': [
            'aluguel', 'condominio', 'condom√≠nio', 'luz', 'energia',
            '√°gua', 'agua', 'gas', 'g√°s', 'internet', 'telefone',
            'iptu', 'reforma', 'reparo', 'manuten√ß√£o', 'manutencao'
        ],
        'Sa√∫de': [
            'farmacia', 'farm√°cia', 'remedios', 'rem√©dios', 'medico',
            'm√©dico', 'dentista', 'hospital', 'clinica', 'cl√≠nica',
            'exame', 'consulta', 'tratamento', 'plano de saude', 'plano de sa√∫de'
        ],
        'Lazer': [
            'cinema', 'teatro', 'show', 'festa', 'bar', 'balada',
            'viagem', 'hotel', 'pousada', 'passeio', 'diversao', 'divers√£o',
            'jogo', 'netflix', 'spotify', 'streaming'
        ],
        'Educa√ß√£o': [
            'curso', 'faculdade', 'escola', 'colegio', 'col√©gio',
            'livro', 'material', 'mensalidade', 'matricula', 'matr√≠cula'
        ],
        'Vestu√°rio': [
            'roupa', 'sapato', 'tenis', 't√™nis', 'camisa', 'calca', 'cal√ßa',
            'vestido', 'casaco', 'acessorio', 'acess√≥rio', 'relogio', 'rel√≥gio'
        ],
        'Trabalho': [
            'salario', 'sal√°rio', 'freelance', 'projeto', 'comissao',
            'comiss√£o', 'bonus', 'b√¥nus', 'hora extra', 'overtime'
        ]
    }
    
    for categoria, palavras in categorias.items():
        if any(palavra in texto for palavra in palavras):
            return categoria
    
    return 'Outros'

def gerar_descricao(mensagem_original, valor):
    """Gerar descri√ß√£o limpa removendo o valor"""
    
    # Remover valores monet√°rios da descri√ß√£o
    descricao = re.sub(r'r\$\s*\d+(?:[,\.]\d{1,2})?', '', mensagem_original, flags=re.IGNORECASE)
    descricao = re.sub(r'\d+(?:[,\.]\d{1,2})?\s*reais?', '', descricao, flags=re.IGNORECASE)
    descricao = re.sub(r'\d+(?:[,\.]\d{1,2})?\s*r\$', '', descricao, flags=re.IGNORECASE)
    
    # Remover palavras de a√ß√£o comuns
    palavras_remover = ['gastei', 'paguei', 'comprei', 'recebi', 'ganhei', 'no', 'na', 'do', 'da', 'de', 'com']
    palavras = descricao.split()
    palavras_filtradas = [palavra for palavra in palavras if palavra.lower().strip() not in palavras_remover]
    
    descricao_final = ' '.join(palavras_filtradas).strip()
    
    # Se ficou muito vazio, usar descri√ß√£o gen√©rica
    if len(descricao_final) < 3:
        descricao_final = f"Lan√ßamento de R$ {valor:.2f}"
    
    return descricao_final

def gerar_relatorio_inteligente(comando, usuario):
    """Gerar relat√≥rios baseados no comando natural"""
    
    hoje = date.today()
    
    # Detectar per√≠odo solicitado
    if 'hoje' in comando:
        filtro_data = "date(data_efetiva) = ?"
        params_data = [str(hoje)]
        periodo_nome = "hoje"
        data_inicio = hoje
    elif 'ontem' in comando:
        ontem = hoje - timedelta(days=1)
        filtro_data = "date(data_efetiva) = ?"
        params_data = [str(ontem)]
        periodo_nome = "ontem"
        data_inicio = ontem
    elif 'semana' in comando:
        inicio_semana = hoje - timedelta(days=7)
        filtro_data = "date(data_efetiva) >= ?"
        params_data = [str(inicio_semana)]
        periodo_nome = "√∫ltimos 7 dias"
        data_inicio = inicio_semana
    elif 'm√™s' in comando or 'mes' in comando:
        filtro_data = "strftime('%Y-%m', data_efetiva) = ?"
        params_data = [hoje.strftime('%Y-%m')]
        periodo_nome = "este m√™s"
        data_inicio = hoje.replace(day=1)
    else:
        # Padr√£o: √∫ltimos 30 dias
        inicio_periodo = hoje - timedelta(days=30)
        filtro_data = "date(data_efetiva) >= ?"
        params_data = [str(inicio_periodo)]
        periodo_nome = "√∫ltimos 30 dias"
        data_inicio = inicio_periodo
    
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        # Query para gastos
        cursor.execute(f"""
            SELECT SUM(valor), COUNT(*) 
            FROM lancamentos 
            WHERE usuario = ? AND tipo = 'gasto' AND {filtro_data}
        """, [usuario] + params_data)
        resultado_gastos = cursor.fetchone()
        total_gastos = resultado_gastos[0] or 0
        qtd_gastos = resultado_gastos[1] or 0
        
        # Query para receitas
        cursor.execute(f"""
            SELECT SUM(valor), COUNT(*) 
            FROM lancamentos 
            WHERE usuario = ? AND tipo = 'receita' AND {filtro_data}
        """, [usuario] + params_data)
        resultado_receitas = cursor.fetchone()
        total_receitas = resultado_receitas[0] or 0
        qtd_receitas = resultado_receitas[1] or 0
        
        # Gastos por categoria
        cursor.execute(f"""
            SELECT categoria, SUM(valor), COUNT(*)
            FROM lancamentos 
            WHERE usuario = ? AND tipo = 'gasto' AND {filtro_data}
            GROUP BY categoria
            ORDER BY SUM(valor) DESC
            LIMIT 5
        """, [usuario] + params_data)
        gastos_por_categoria = cursor.fetchall()
        
        # √öltimos lan√ßamentos
        cursor.execute(f"""
            SELECT tipo, valor, descricao, categoria, date(data_efetiva)
            FROM lancamentos 
            WHERE usuario = ? AND {filtro_data}
            ORDER BY data_lancamento DESC 
            LIMIT 8
        """, [usuario] + params_data)
        ultimos_lancamentos = cursor.fetchall()
        
        conn.close()
        
        # Calcular saldo
        saldo = total_receitas - total_gastos
        saldo_emoji = "‚úÖ" if saldo >= 0 else "‚ùå"
        
        # Montar relat√≥rio
        relatorio = f"""üìä **RELAT√ìRIO FINANCEIRO - {periodo_nome.upper()}**
{'‚ïê' * 50}

üí∞ **RESUMO GERAL:**
‚Ä¢ üìà Receitas: R$ {total_receitas:.2f} ({qtd_receitas} lan√ßamentos)
‚Ä¢ üìâ Gastos: R$ {total_gastos:.2f} ({qtd_gastos} lan√ßamentos)
‚Ä¢ üíµ **Saldo: R$ {saldo:.2f}** {saldo_emoji}

"""
        
        # Se√ß√£o de categorias (se houver gastos)
        if gastos_por_categoria:
            relatorio += "üè∑Ô∏è **GASTOS POR CATEGORIA:**\n"
            for categoria, valor, quantidade in gastos_por_categoria:
                percentual = (valor / total_gastos * 100) if total_gastos > 0 else 0
                relatorio += f"‚Ä¢ {categoria}: R$ {valor:.2f} ({percentual:.1f}%)\n"
            relatorio += "\n"
        
        # √öltimos lan√ßamentos
        if ultimos_lancamentos:
            relatorio += "üìã **√öLTIMOS LAN√áAMENTOS:**\n"
            for tipo, valor, desc, categoria, data_efetiva in ultimos_lancamentos:
                emoji = "üí∞" if tipo == "receita" else "üí∏"
                data_formatada = datetime.strptime(data_efetiva, '%Y-%m-%d').strftime('%d/%m')
                relatorio += f"{emoji} {data_formatada} - R$ {valor:.2f} - {desc}\n"
        else:
            relatorio += "üì≠ **Nenhum lan√ßamento encontrado no per√≠odo.**\n"
        
        relatorio += f"\nüïí Gerado em {datetime.now().strftime('%H:%M - %d/%m/%Y')}"
        
        logger.info(f"üìä Relat√≥rio gerado para {usuario}: {periodo_nome}")
        return relatorio
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar relat√≥rio: {e}")
        return f"‚ùå **Erro ao consultar dados:** {str(e)}\n\nTente novamente em alguns segundos."

def processar_exclusao(comando, usuario):
    """Processar comandos de exclus√£o de lan√ßamentos"""
    
    # Por enquanto, retorna instru√ß√£o de exclus√£o manual
    return """üóëÔ∏è **EXCLUS√ÉO DE LAN√áAMENTOS**

Para excluir lan√ßamentos, voc√™ pode:

üì± **Via WhatsApp:**
‚Ä¢ "deletar √∫ltimo gasto"
‚Ä¢ "remover √∫ltimo lan√ßamento"
‚Ä¢ "cancelar receita de 1000"

üîç **Para ver seus √∫ltimos lan√ßamentos:**
‚Ä¢ "relat√≥rio de hoje"
‚Ä¢ "meus gastos recentes"

‚ö†Ô∏è **Aten√ß√£o:** Exclus√µes s√£o permanentes!"""

def gerar_mensagem_ajuda():
    """Gerar mensagem de ajuda completa"""
    
    return """ü§ñ **ASSISTENTE FINANCEIRO - AJUDA**
{'‚ïê' * 40}

üí∞ **REGISTRAR GASTOS/RECEITAS:**
‚Ä¢ "Gastei 50 reais no mercado"
‚Ä¢ "Paguei 200 de conta de luz"
‚Ä¢ "Recebi 1000 de sal√°rio"
‚Ä¢ "25,50 almo√ßo"

üìä **RELAT√ìRIOS:**
‚Ä¢ "Mostre meus gastos de hoje"
‚Ä¢ "Relat√≥rio da semana"
‚Ä¢ "Qual meu saldo do m√™s?"
‚Ä¢ "Gastos por categoria"

üè∑Ô∏è **CATEGORIAS AUTOM√ÅTICAS:**
Alimenta√ß√£o, Transporte, Moradia, Sa√∫de, Lazer, Educa√ß√£o, Vestu√°rio, Trabalho, Outros

üé§ **COMANDOS DE VOZ:**
‚Ä¢ Grave um √°udio falando seus gastos
‚Ä¢ "Paguei quarenta reais de gasolina"

üì± **COMANDOS ESPECIAIS:**
‚Ä¢ "ajuda" - Esta mensagem
‚Ä¢ "relat√≥rio" - Resumo geral
‚Ä¢ "saldo" - Saldo atual

‚ú® **DICAS:**
‚Ä¢ Use linguagem natural
‚Ä¢ Valores em reais (R$ ou reais)
‚Ä¢ Seja espec√≠fico na descri√ß√£o

‚ùì **D√∫vidas?** Fale comigo em linguagem natural!"""

def salvar_lancamento(usuario, tipo, valor, descricao, categoria='Outros'):
    """Salvar lan√ßamento no banco de dados"""
    
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute("""
            INSERT INTO lancamentos 
            (usuario, tipo, valor, descricao, categoria, data_efetiva)
            VALUES (?, ?, ?, ?, ?, date('now'))
        """, (usuario, tipo, valor, descricao, categoria))
        
        lancamento_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"üíæ Lan√ßamento salvo: {tipo} R$ {valor:.2f} para {usuario}")
        return lancamento_id
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao salvar lan√ßamento: {e}")
        return False

# ==================== ROUTES FLASK ====================

@app.route('/')
def home():
    """P√°gina inicial com status do sistema"""
    
    # Estat√≠sticas b√°sicas
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM lancamentos")
        total_lancamentos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(DISTINCT usuario) FROM lancamentos")
        total_usuarios = cursor.fetchone()[0]
        
        conn.close()
    except:
        total_lancamentos = 0
        total_usuarios = 0
    
    return f"""
<!DOCTYPE html>
<html>
<head>
    <title>ü§ñ Assistente Financeiro WhatsApp</title>
    <meta charset="UTF-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
        .container {{ max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        .status {{ background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .stats {{ background: #f0f8ff; padding: 15px; border-radius: 5px; margin: 20px 0; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Assistente Financeiro WhatsApp</h1>
        
        <div class="status">
            <h3>‚úÖ Sistema Online</h3>
            <p><strong>Status:</strong> Funcionando</p>
            <p><strong>Hora:</strong> {datetime.now().strftime('%H:%M:%S - %d/%m/%Y')}</p>
            <p><strong>Ambiente:</strong> {'Produ√ß√£o' if not DEBUG else 'Desenvolvimento'}</p>
        </div>
        
        <div class="stats">
            <h3>üìä Estat√≠sticas</h3>
            <p><strong>Total de Lan√ßamentos:</strong> {total_lancamentos}</p>
            <p><strong>Usu√°rios Ativos:</strong> {total_usuarios}</p>
        </div>
        
        <h3>üì± Configura√ß√£o WhatsApp</h3>
        <p><strong>Webhook URL:</strong></p>
        <code>{request.url_root}webhook</code>
        
        <h3>üéØ Comandos Suportados</h3>
        <ul>
            <li>"Gastei 50 reais no mercado"</li>
            <li>"Recebi 1000 de sal√°rio"</li>
            <li>"Mostre meus gastos de hoje"</li>
            <li>"Qual meu saldo?"</li>
            <li>"Relat√≥rio da semana"</li>
        </ul>
        
        <p><em>Deploy otimizado para Render.com</em></p>
    </div>
</body>
</html>
    """

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint principal do webhook para WhatsApp via Twilio"""
    
    try:
        # Log inicial
        logger.info("üîÑ Webhook chamado - iniciando processamento")
        
        # Capturar dados do Twilio
        from_number = request.form.get('From', '')
        message_body = request.form.get('Body', '').strip()
        profile_name = request.form.get('ProfileName', 'Usu√°rio')
        message_type = request.form.get('MessageType', 'text')
        
        # Log detalhado da requisi√ß√£o
        logger.info(f"üì® Webhook recebido:")
        logger.info(f"   From: {from_number}")
        logger.info(f"   Body: '{message_body}'")
        logger.info(f"   Profile: {profile_name}")
        logger.info(f"   Type: {message_type}")
        
        if not message_body:
            logger.warning("‚ö†Ô∏è Mensagem vazia recebida")
            return "‚ùå Mensagem vazia", 400
        
        # Processar comando com IA
        logger.info("üß† Iniciando processamento IA...")
        resposta = processar_comando_ia(message_body, from_number)
        logger.info(f"‚úÖ IA processou: {len(resposta)} caracteres gerados")
        
        logger.info(f"üì§ Enviando resposta para {from_number}")
        
        # Retornar resposta em formato TwiML
        try:
            from twilio.twiml.messaging_response import MessagingResponse
            twiml_response = MessagingResponse()
            twiml_response.message(resposta)
            logger.info("üì± Resposta TwiML criada")
            return str(twiml_response), 200, {'Content-Type': 'text/xml'}
        except ImportError:
            # Fallback se Twilio n√£o estiver dispon√≠vel
            logger.warning("‚ö†Ô∏è Twilio TwiML n√£o dispon√≠vel, usando resposta simples")
            return resposta, 200, {'Content-Type': 'text/plain; charset=utf-8'}
    
    except Exception as e:
        logger.error(f"‚ùå Erro no webhook: {e}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return f"Erro interno: {str(e)}", 500

@app.route('/teste')
def teste():
    """P√°gina de teste do webhook"""
    try:
        with open('teste_webhook.html', 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return """
        <h1>P√°gina de teste n√£o encontrada</h1>
        <p>Arquivo teste_webhook.html n√£o foi encontrado.</p>
        <p><a href="/">Voltar ao in√≠cio</a></p>
        """

@app.route('/status')
def status():
    """Endpoint de status para monitoramento"""
    
    return jsonify({
        'status': 'online',
        'timestamp': datetime.now().isoformat(),
        'version': '2.0',
        'environment': 'production' if not DEBUG else 'development'
    })

@app.route('/health')
def health():
    """Health check para Render"""
    
    try:
        # Teste b√°sico do banco
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT 1")
        conn.close()
        
        return jsonify({'status': 'healthy'}), 200
    except Exception as e:
        return jsonify({'status': 'unhealthy', 'error': str(e)}), 500

# ==================== INICIALIZA√á√ÉO ====================
def main():
    """Fun√ß√£o principal"""
    
    logger.info("üöÄ Iniciando Assistente Financeiro para Render.com")
    
    # Inicializar banco de dados
    if not inicializar_banco():
        logger.error("‚ùå Falha ao inicializar banco de dados")
        sys.exit(1)
    
    logger.info(f"üåê Configura√ß√£o:")
    logger.info(f"   - Porta: {PORT}")
    logger.info(f"   - Debug: {DEBUG}")
    logger.info(f"   - Banco: {DB_FILE}")
    
    # Iniciar servidor Flask
    app.run(
        host='0.0.0.0',
        port=PORT,
        debug=DEBUG,
        threaded=True
    )

if __name__ == '__main__':
    main()
